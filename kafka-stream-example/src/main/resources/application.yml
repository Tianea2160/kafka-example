server:
  port: 8081

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: kafka-stream-example
  kafka:
    bootstrap-servers: localhost:9092
    properties:
      # 클러스터에서 필요한 경우 추가
      security.protocol: PLAINTEXT
    consumer:
      auto-offset-reset: earliest
      group-id: kafka-stream-example
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: '*'
    listener:
      type: batch
      concurrency: 3  # 각 리스너마다 3개의 스레드 사용
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
    streams:
      application-id: kafka-stream-example
      properties:
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        processing.guarantee: at_least_once
        commit.interval.ms: 100
        cache.max.bytes.buffering: 0
        auto.create.topics.enable: true
        replication.factor: 1
        num.stream.threads: 3
        state.dir: /tmp/kafka-streams
        max.task.idle.ms: 100
        topology.optimization: all  # 토폴로지 최적화 활성화

# 로깅 설정
logging:
  level:
    root: info
    org.tianea.kafkastreamexample: debug
    org.apache.kafka: warn

# 커스텀 설정
kafka:
  bootstrap-servers: localhost:9092
  input-topic: input-topic
  input-topic2: input-topic2
  output-topic: output-topic
  merged-topic: merged-topic
  merge-input-topic-1: merge-input-topic-1
  merge-input-topic-2: merge-input-topic-2
  merge-output-topic-1: merge-output-topic-1
  join-input-topic-1: join-input-topic-1
  join-input-topic-2: join-input-topic-2
  join-output-topic: join-output-topic